#!/bin/env php
<?php

/**
 * Bundler CLI tool
 * mode: php
 */

declare(strict_types=1);

use GetOptionKit\OptionCollection;
use GetOptionKit\OptionParser;
use GetOptionKit\OptionPrinter\ConsoleOptionPrinter;
use Ronanchilvers\Bundler\Builder;
use Ronanchilvers\Bundler\Cli;
use Ronanchilvers\Bundler\Events\Dispatcher;
use Ronanchilvers\Bundler\Events\EventNames;
use Ronanchilvers\Bundler\Processor;
use Ronanchilvers\Bundler\Watcher\File;

$baseDir = null;
foreach (
    [__DIR__ . "/../../../autoload.php", __DIR__ . "/../vendor/autoload.php"]
    as $file
) {
    if (file_exists($file)) {
        $file = realpath($file);
        $baseDir = dirname(dirname($file));
        require $file;
        break;
    }
}

function build(
    string $filename,
    string $manifestFilename,
    ?Dispatcher $events
) {
    Cli::notice("Processing files");
    $builder = Builder::fromYamlFile(
        $filename,
        $events
    );
    $processor = new Processor($events);
    $manifest = $processor->run($builder);
    $manifest->store($manifestFilename);
}

// Handle CLI options
$specs = new OptionCollection();
$specs
    ->add("c|config:", "Bundler configuration file")
    ->isa("String")
    ->defaultValue($baseDir . "/bundler.yaml");
$specs
    ->add("m|manifest:", "Manifest cache file")
    ->isa("String")
    ->defaultValue($baseDir . "/bundler.manifest.cache");
$specs
    ->add("watch", "Watch the bundler config and rebuild when it changes")
    ->isa("bool")
    ->defaultValue(false);
$specs
    ->add("v|verbose", "Verbose output")
    ->isa("bool")
    ->defaultValue(false);
$specs
    ->add("d|debug", "Debugging output")
    ->isa("bool")
    ->defaultValue(false);
$specs
    ->add("h|help", "Print this help message")
    ->isa("bool")
    ->defaultValue(false);

try {
    $parser = new OptionParser($specs);
    $result = $parser->parse($argv);

    // Set output level
    $level = Cli::LEVEL_NOTICE;
    if ($result->keys['verbose']->value) {
        $level = Cli::LEVEL_INFO;
    }
    if ($result->keys['debug']->value) {
        $level = Cli::LEVEL_DEBUG;
    }
    Cli::setLevel($level);

    $configFilename = $result->keys["config"]->value;
    $manifestFilename = $result->keys["manifest"]->value;
    $events = new Dispatcher();
    $events->on(EventNames::WATCHER_START, function ($watcher) {
        Cli::debug("Watcher started");
    });
    $events->on(EventNames::BUNDLE_PROCESS_BEFORE, function ($name, $bundle, $formatter) {
        Cli::debug("Formatter - " . $formatter::class);
    });

    switch (true) {
        case true == $result->keys["help"]->value:
            $printer = new ConsoleOptionPrinter();
            echo sprintf("Usage: %s", $argv[0]) . PHP_EOL;
            echo $printer->render($specs);
            break;
        case true == $result->keys["watch"]->value:
            Cli::info($configFilename . " - starting watch");
            $watcher = new File($events);
            $events->on(EventNames::CONFIG_FILE_ADDED, function ($filename) use ($watcher) {
                Cli::debug("Adding file watch - {$filename}");
                $watcher->addFile($filename);
            });
            $watcher->addFile($configFilename);
            build($configFilename, $manifestFilename, $events);
            $watcher->start(function (string $filename) use (
                $configFilename,
                $manifestFilename,
                $events,
            ) {
                Cli::debug("Change detected - " . $filename);
                build($configFilename, $manifestFilename, $events);
            });
            break;
        default:
            build($configFilename, $manifestFilename, $events);
            break;
    }
} catch (Exception $e) {
    Cli::error($e->getMessage());
    exit(1);
}
exit(0);
